```typescript
import { test, expect } from '@playwright/test';

test('Reset Password Functionality', async ({ page }) => {
    // Open the login page
    await page.goto('https://yourwebsite.com/login');

    // Click on the "Forgot Password" link
    await page.click('text=Forgot Password');

    // Verify the redirection to the password reset form
    await expect(page).toHaveURL('https://yourwebsite.com/reset-password');

    // Enter the registered email
    await page.fill('input[name="email"]', 'registeredemail@example.com');

    // Submit the form
    await page.click('button[type="submit"]');

    // Verify that the reset email is sent
    await page.waitForSelector('text=Reset instructions sent to your email.');

    // Verify error message for unregistered email
    await page.fill('input[name="email"]', 'unregisteredemail@example.com');
    await page.click('button[type="submit"]');
    await page.waitForSelector('text=Email is not registered.');

    // Click on the link in the reset email
    const resetEmailLink = await page.$eval('a', (element) => element.getAttribute('href'));
    await page.goto(resetEmailLink);

    // Set new password in the password reset form
    await page.fill('input[name="newPassword"]', 'StrongPassword123');
    await page.fill('input[name="confirmPassword"]', 'StrongPassword123');
    await page.click('button[type="submit"]');

    // Verify password complexity requirements
    await expect(page).toHaveSelector('text=Password must contain at least 8 characters, including uppercase, lowercase, and numbers.');

    // Additional checks for accessibility from mobile
    const userAgent = await page.evaluate(() => navigator.userAgent);
    if (userAgent.includes('Mobile')) {
        // Mobile specific checks
    }
});
```
This test script covers the acceptance criteria for the "Reset Password" functionality using Playwright TypeScript. It includes proper locators for identifying elements on the page and a reusable structure for executing the test steps.